// Code generated by MockGen. DO NOT EDIT.
// Source: src/repository/wallet_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mozartmuhammad/julo-be-test/src/model/domain"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method.
func (m *MockWalletRepository) AddTransaction(ctx context.Context, transaction domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockWalletRepositoryMockRecorder) AddTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockWalletRepository)(nil).AddTransaction), ctx, transaction)
}

// CreateWallet mocks base method.
func (m *MockWalletRepository) CreateWallet(ctx context.Context, wallet domain.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletRepositoryMockRecorder) CreateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletRepository)(nil).CreateWallet), ctx, wallet)
}

// GetWallet mocks base method.
func (m *MockWalletRepository) GetWallet(ctx context.Context, customerXID string) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, customerXID)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletRepositoryMockRecorder) GetWallet(ctx, customerXID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletRepository)(nil).GetWallet), ctx, customerXID)
}

// GetWalletTransactions mocks base method.
func (m *MockWalletRepository) GetWalletTransactions(ctx context.Context, walletID string) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransactions", ctx, walletID)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletTransactions indicates an expected call of GetWalletTransactions.
func (mr *MockWalletRepositoryMockRecorder) GetWalletTransactions(ctx, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransactions", reflect.TypeOf((*MockWalletRepository)(nil).GetWalletTransactions), ctx, walletID)
}

// UpdateTransactionStatus mocks base method.
func (m *MockWalletRepository) UpdateTransactionStatus(ctx context.Context, transactionID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", ctx, transactionID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockWalletRepositoryMockRecorder) UpdateTransactionStatus(ctx, transactionID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockWalletRepository)(nil).UpdateTransactionStatus), ctx, transactionID, status)
}

// UpdateWalletBalance mocks base method.
func (m *MockWalletRepository) UpdateWalletBalance(ctx context.Context, walletID string, initialAmount, finalAmount int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletBalance", ctx, walletID, initialAmount, finalAmount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletBalance indicates an expected call of UpdateWalletBalance.
func (mr *MockWalletRepositoryMockRecorder) UpdateWalletBalance(ctx, walletID, initialAmount, finalAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalance", reflect.TypeOf((*MockWalletRepository)(nil).UpdateWalletBalance), ctx, walletID, initialAmount, finalAmount)
}

// UpdateWalletStatus mocks base method.
func (m *MockWalletRepository) UpdateWalletStatus(ctx context.Context, customerXID, status string, enabledAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletStatus", ctx, customerXID, status, enabledAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletStatus indicates an expected call of UpdateWalletStatus.
func (mr *MockWalletRepositoryMockRecorder) UpdateWalletStatus(ctx, customerXID, status, enabledAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletStatus", reflect.TypeOf((*MockWalletRepository)(nil).UpdateWalletStatus), ctx, customerXID, status, enabledAt)
}
